.. http://www.mongodb.org/display/DOCS/JS+Benchmarking+Harness WRITING-156

.. _js-benchmarking-harness:

=======================
JS Benchmarking Harness
=======================

This ``benchRun`` command is designed as a QA baseline perf measurement
tool, not designed to be a "benchmark".

CODE
~~~~

.. code-block:: javascript

   db.foo.drop();
   db.foo.insert( { _id : 1 } )

   ops = [{op: "findOne", ns: "test.foo", query: {_id: 1}},
          {op: "update", ns: "test.foo", query: {_id: 1}, update: {$inc: {x: 1}}}]

   for ( var x = 1; x <= 128; x *= 2) {
       res = benchRun( {
       	  parallel : x ,
           seconds : 5 ,
           ops : ops
       } );
       print( "threads: " + x + "\t queries/sec: " + res.query );
   }

Dynamic Values
~~~~~~~~~~~~~~

.. code-block:: javascript

   // benchmark updates using the $inc operator
   res = benchRun( {
       ops : [ {
           ns : "test.foo" ,
           op : "update" ,
           query : { _id : { "#RAND_INT" : [ 0 , 100 ] } } ,
           update : { $inc : { x : 1 } }
       } ] ,
       parallel : 2 ,
       seconds : 1 ,
       totals : true
   } );
   print( "threads: 2\t update/sec: " + res.update );
   // benchmark inserts with random strings
   res = benchRun( {
       ops : [ {
           ns : "test.foo" ,
           op : "insert" ,
           doc : { y : { "#RAND_STRING" : [ 10 ] } }
       } ] ,
       parallel : 2 ,
       seconds : 1 ,
       totals : true
   } );
   print( "threads: 2\t insert/sec: " + res.insert );

Options
~~~~~~~

.. option:: host

   The hostname of the machine :program:`mongod` is running on
   (defaults to localhost).

.. option:: username

   The username to use when authenticating to :program:`mongod` (only
   use if running with ``auth``).

.. option:: password

   The password to use when authenticating to :program:`mongod` (only
   use if running with ``auth``).

.. option:: db

   The database to authenticate to (only necessary if running with
   ``auth``).

.. option:: ops 

   A list of objects describing the operations to run (documented below).

.. option:: parallel

   The number of threads to run (defaults to single thread).

.. option:: seconds

   The amount of time to run the tests for (defaults to one second).

Operation Options
~~~~~~~~~~~~~~~~~

.. option:: ns

   The namespace of the collection you are running the operation on,
   should be of the form ``"db.collection"``.

.. option:: op
   
   The type of operation can be ``"findOne"``, ``"insert"``,
   ``"update"``, ``"remove"``, ``"createIndex"``, ``"dropIndex"`` or
   ``"command"``.

.. option:: query

   The query object to use when querying or updating documents.

.. option:: update

   The update object (same as 2nd argument of ``update()`` function).

.. option:: doc

   The document to insert into the database (only for insert and
   remove).

.. option:: safe

   ``boolean`` specifying whether to use safe writes (only for update and
   insert).

Dynamic Operators
~~~~~~~~~~~~~~~~~

.. code-block:: javascript

   { "#RAND_INT" : [ min , max , <multiplier> ] }

- ``[ 0 , 10 , 4 ]`` would produce random numbers between ``0`` and
  ``10`` and then multiply by ``4``.

.. code-block:: javascript

   { "#RAND_STRING" : [ length ] }

- ``[ 3 ]`` would produce a string of ``3`` random characters.

Dynamic operators generate random strings, random ints, etc but don't
work in second level objects, just main level.

- This is fine:

  .. code-block:: javascript

     var complexDoc3 = { info: "#RAND_STRING": [30] } }

- This is only going to insert a value called ``"#RAND_STRING"`` with
  an array as a key:

  .. code-block:: javascript

     var complexDoc3 = { info: { inner_field: { "#RAND_STRING": [30] } } }

More info: 

- `<http://github.com/mongodb/mongo/commit/3db3cb13dc1c522db8b59745d6c74b0967f1611c>`_

- `<http://github.com/mongodb/mongo/blob/master/jstests/bench_test1.js>`_

- `<http://github.com/mongodb/mongo/blob/master/jstests/bench_test2.js>`_

- `<http://github.com/mongodb/mongo/blob/master/jstests/bench_test3.js>`_
