.. http://www.mongodb.org/display/DOCS/Replica+Set+Semantics WRITING-113

.. _java-driver-replica-set-semantics:

=================================
Java Driver Replica Set Semantics
=================================

The MongoDB Java driver handles failover in replicated setups with
tunable levels of transparency to the user. By default, a ``Mongo``
connection object will ignore failures of secondaries, and only reads
will throw ``MongoExceptions`` when the primary node is unreachable.

The level of exception reporting is tunable however, using a specific
``WriteConcern`` ; you can set this on the Mongo/DB/Collection/Method
level. Several levels are included as static options:

.. list-table::

   * - .. option:: WriteConcern.NONE

     - No exceptions thrown.

   * - .. option:: WriteConcern.NORMAL

     - Exceptions are only thrown when the primary node is unreachable
       for a read, or the full replica set is unreachable.

   * - .. option:: WriteConcern.SAFE

     - Same as the above, but exceptions thrown when there is a server
       error on writes or reads. Calls ``getLastError()``.

   * - .. option:: WriteConcern.REPLICAS_SAFE

     - Tries to write to two separate nodes. Same as the above, but
       will throw an exception if two writes are not possible.

   * - .. option:: WriteConcern.FSYNC_SAFE

     - Same as :option:`WriteConcern.SAFE`, but also waits for write to be
       written to disk.

.. warning::

   Additional errors may appear in the log files, these are for
   reporting purposes and logged based on the logging settings.

Sample code is provided which illustrates some of these options. To
quickly initialize a sample replica set, you can use the
:program:`mongo` shell:

.. code-block:: javascript

   var rst = new ReplSetTest({ nodes : 3 })
   rst.startSet() // wait for processes to start
   rst.initiate() // wait for replica set initialization

Java client code demonstrating error handling is available:

- `<https://github.com/mongodb/mongo-snippets/blob/master/java/Test.java>`_
